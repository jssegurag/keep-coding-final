from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.openapi.utils import get_openapi

from .routes import queries, system, metadata

def custom_openapi():
    """Generar documentaci√≥n OpenAPI personalizada con informaci√≥n detallada."""
    if app.openapi_schema:
        return app.openapi_schema
    
    openapi_schema = get_openapi(
        title="RAG Legal API",
        version="1.0.0",
        description="""
# üèõÔ∏è RAG Legal API - Sistema de Recuperaci√≥n Augmentada por Generaci√≥n

## üìã Descripci√≥n General

Esta API proporciona capacidades avanzadas de b√∫squeda sem√°ntica y gesti√≥n de documentos legales utilizando t√©cnicas de Recuperaci√≥n Augmentada por Generaci√≥n (RAG). El sistema permite consultar documentos legales de manera inteligente, extraer informaci√≥n relevante y mantener un historial de consultas.

## üöÄ Caracter√≠sticas Principales

- **üîç Consultas Sem√°nticas**: B√∫squeda inteligente en documentos legales
- **üìö Gesti√≥n de Metadatos**: Organizaci√≥n y filtrado de documentos
- **üìä Historial de Consultas**: Seguimiento de b√∫squedas realizadas
- **üè• Filtros Avanzados**: B√∫squeda por tipo de documento, tribunal, fechas
- **üìà Estad√≠sticas del Sistema**: Monitoreo de uso y rendimiento

## üõ†Ô∏è Tecnolog√≠as Utilizadas

- **FastAPI**: Framework web moderno y r√°pido
- **Pandas**: Procesamiento de datos y metadatos
- **Pydantic**: Validaci√≥n de datos y serializaci√≥n
- **Uvicorn**: Servidor ASGI de alto rendimiento

## üìñ Gu√≠a de Uso

### Autenticaci√≥n
Actualmente la API no requiere autenticaci√≥n para el MVP. En futuras versiones se implementar√° OAuth2.

### Rate Limiting
- **Consultas**: 100 requests por minuto
- **Metadatos**: 200 requests por minuto
- **Sistema**: 50 requests por minuto

### Formatos de Respuesta
Todas las respuestas est√°n en formato JSON con codificaci√≥n UTF-8.

### C√≥digos de Estado HTTP
- `200`: Operaci√≥n exitosa
- `400`: Error en los datos de entrada
- `404`: Recurso no encontrado
- `422`: Error de validaci√≥n
- `500`: Error interno del servidor

## üîó Endpoints Disponibles

### Consultas (`/api/v1/queries`)
- `POST /queries`: Realizar consultas sem√°nticas
- `GET /queries/history`: Obtener historial de consultas

### Metadatos (`/api/v1/metadata`)
- `GET /metadata/documents`: Listar documentos con filtros
- `GET /metadata/documents/{id}`: Obtener documento espec√≠fico
- `GET /metadata/documents/{id}/summary`: Resumen de documento

### Sistema (`/api/v1/system`)
- `GET /system/health`: Estado de salud del sistema
- `GET /system/info`: Informaci√≥n general del sistema
- `GET /system/stats`: Estad√≠sticas de uso

## üìù Ejemplos de Uso

### Consulta Sem√°ntica
```bash
curl -X POST "http://localhost:8001/api/v1/queries" \
  -H "Content-Type: application/json" \
  -d '{
    "query": "¬øCu√°l es el demandante del expediente?",
    "n_results": 5
  }'
```

### Obtener Metadatos
```bash
curl "http://localhost:8001/api/v1/metadata/documents?page=1&page_size=10&document_type=Sentencia"
```

## üêõ Reportar Problemas

Si encuentras alg√∫n problema o tienes sugerencias, por favor:
1. Revisa la documentaci√≥n completa en `/docs`
2. Verifica los logs del servidor
3. Contacta al equipo de desarrollo

## üìÑ Licencia

Este proyecto es parte de un MVP para demostraci√≥n de capacidades RAG en documentos legales.

## üîÑ Versiones

- **v1.0.0**: MVP inicial con funcionalidades b√°sicas
- **Pr√≥ximas**: Autenticaci√≥n, m√°s tipos de documentos, an√°lisis avanzado
        """,
        routes=app.routes,
    )
    
    # Agregar informaci√≥n de contacto
    openapi_schema["info"]["contact"] = {
        "name": "Equipo RAG Legal",
        "email": "support@raglegal.com",
        "url": "https://github.com/rag-legal/api"
    }
    
    # Agregar licencia
    openapi_schema["info"]["license"] = {
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT"
    }
    
    # Agregar servidores
    openapi_schema["servers"] = [
        {
            "url": "http://localhost:8001",
            "description": "Servidor de desarrollo local"
        },
        {
            "url": "https://api.raglegal.com",
            "description": "Servidor de producci√≥n"
        }
    ]
    
    # Agregar tags con descripciones detalladas
    openapi_schema["tags"] = [
        {
            "name": "Consultas",
            "description": "Endpoints para realizar consultas sem√°nticas en documentos legales y gestionar el historial de b√∫squedas.",
            "externalDocs": {
                "description": "Gu√≠a de consultas sem√°nticas",
                "url": "https://docs.raglegal.com/queries"
            }
        },
        {
            "name": "Metadatos",
            "description": "Gesti√≥n y consulta de metadatos de documentos legales, incluyendo filtros, paginaci√≥n y res√∫menes.",
            "externalDocs": {
                "description": "Gu√≠a de metadatos",
                "url": "https://docs.raglegal.com/metadata"
            }
        },
        {
            "name": "Sistema",
            "description": "Endpoints para monitorear el estado del sistema, obtener informaci√≥n general y estad√≠sticas de uso.",
            "externalDocs": {
                "description": "Monitoreo del sistema",
                "url": "https://docs.raglegal.com/system"
            }
        }
    ]
    
    app.openapi_schema = openapi_schema
    return app.openapi_schema

app = FastAPI(
    title="RAG Legal API",
    description="API REST para sistema RAG de documentos legales",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
    swagger_ui_parameters={
        "defaultModelsExpandDepth": -1,
        "defaultModelExpandDepth": 3,
        "displayRequestDuration": True,
        "docExpansion": "list",
        "filter": True,
        "showExtensions": True,
        "showCommonExtensions": True,
        "syntaxHighlight.theme": "monokai"
    }
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"]
)

# Incluir routers
app.include_router(system.router)
app.include_router(queries.router)
app.include_router(metadata.router)

@app.get("/", 
    summary="Informaci√≥n General",
    description="Endpoint ra√≠z que proporciona informaci√≥n b√°sica sobre la API RAG Legal.",
    response_description="Informaci√≥n general del sistema",
    tags=["Sistema"])
async def root():
    """
    # üè† P√°gina Principal
    
    Bienvenido a la API RAG Legal. Este endpoint proporciona informaci√≥n b√°sica sobre el sistema.
    
    ## Respuesta
    
    La respuesta incluye un mensaje de bienvenida y descripci√≥n del sistema.
    
    ## Ejemplo de Respuesta
    
    ```json
    {
        "message": "RAG Legal API - Sistema de Recuperaci√≥n Augmentada por Generaci√≥n"
    }
    ```
    """
    return {
        "message": "RAG Legal API - Sistema de Recuperaci√≥n Augmentada por Generaci√≥n",
        "version": "1.0.0",
        "status": "operational",
        "documentation": "/docs",
        "endpoints": {
            "queries": "/api/v1/queries",
            "metadata": "/api/v1/metadata",
            "system": "/api/v1/system"
        }
    }

# Configurar OpenAPI personalizado
app.openapi = custom_openapi
